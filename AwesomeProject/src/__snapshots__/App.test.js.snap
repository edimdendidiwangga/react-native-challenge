// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders without crashing 1`] = `
<View
  style={
    Object {
      "flex": 1,
      "height": 1334,
    }
  }
  virtual={undefined}
>
  <View
    onLayout={[Function]}
    style={
      Array [
        Object {
          "backgroundColor": "transparent",
          "flex": 1,
        },
        undefined,
      ]
    }
  >
    <View
      style={
        Object {
          "flex": 1,
        }
      }
    >
      <View
        onMoveShouldSetResponder={[Function]}
        onMoveShouldSetResponderCapture={[Function]}
        onResponderEnd={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderReject={[Function]}
        onResponderRelease={[Function]}
        onResponderStart={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        onStartShouldSetResponderCapture={[Function]}
        pointerEvents="auto"
        style={
          Object {
            "backgroundColor": "white",
            "bottom": 0,
            "left": 0,
            "opacity": 1,
            "position": "absolute",
            "right": 0,
            "top": 0,
            "transform": Array [
              Object {
                "translateX": 0,
              },
              Object {
                "translateY": 0,
              },
            ],
          }
        }
      >
        <View
          style={
            Array [
              Object {
                "flex": 1,
              },
              undefined,
            ]
          }
        >
          <RCTScrollView
            automaticallyAdjustContentInsets={false}
            contentInset={
              Object {
                "bottom": 0,
              }
            }
            enableAutoAutomaticScroll={true}
            enableResetScrollToCoords={true}
            extraHeight={75}
            extraScrollHeight={0}
            keyboardDismissMode="interactive"
            onScroll={[Function]}
            resetScrollToCoords={
              Object {
                "x": 0,
                "y": 0,
              }
            }
            scrollEventThrottle={0}
            showsVerticalScrollIndicator={true}
            style={
              Object {
                "backgroundColor": "transparent",
                "flex": 1,
                "paddingTop": 70,
              }
            }
            virtual={undefined}
          >
            <View>
              <ActivityIndicator
                animating={true}
                color="green"
                hidesWhenStopped={true}
                size="large"
                style={
                  Object {
                    "height": 80,
                  }
                }
                virtual={undefined}
              />
            </View>
          </RCTScrollView>
        </View>
      </View>
    </View>
    <View
      style={
        Object {
          "backgroundColor": "#0D47A1",
          "borderBottomColor": "#828287",
          "borderBottomWidth": 0.5,
          "height": 64,
          "left": 0,
          "paddingTop": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
    >
      <View>
        <View
          style={
            Object {
              "left": 0,
              "marginTop": 10,
              "position": "absolute",
              "right": 0,
              "top": 20,
            }
          }
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            lineBreakMode="tail"
            numberOfLines={1}
            style={
              Object {
                "alignSelf": "center",
                "color": "#FFFFFF",
                "fontSize": 18,
                "left": 0,
                "opacity": 1,
                "right": 0,
                "textAlign": "center",
                "width": 180,
              }
            }
          >
            Article Swipper
          </Text>
        </View>
      </View>
    </View>
  </View>
  <Modal
    animationType="fade"
    hardwareAccelerated={false}
    onRequestClose={[Function]}
    supportedOrientations={null}
    transparent={true}
    visible={false}
  >
    <View
      style={
        Object {
          "flex": 1,
          "justifyContent": "flex-start",
          "margin": 20,
        }
      }
    >
      <View
        danger={false}
        style={
          Object {
            "alignItems": "center",
            "backgroundColor": "rgba(0,0,0,0.8)",
            "borderRadius": 5,
            "flexDirection": "row",
            "justifyContent": "space-between",
            "minHeight": 50,
            "paddingBottom": 10,
            "paddingLeft": 10,
            "paddingRight": 10,
            "paddingTop": 10,
          }
        }
        success={false}
        virtual={undefined}
        warning={false}
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Object {
              "color": "#fff",
              "flex": 1,
              "fontFamily": "System",
              "fontSize": 16,
            }
          }
          virtual={undefined}
        />
      </View>
    </View>
  </Modal>
  <Modal
    animationType="fade"
    hardwareAccelerated={false}
    onRequestClose={[Function]}
    transparent={true}
    visible={false}
  >
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      hitSlop={undefined}
      isTVSelectable={true}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "backgroundColor": "rgba(0,0,0,0.4)",
          "flex": 1,
          "justifyContent": "flex-end",
          "opacity": 1,
        }
      }
      testID={undefined}
      tvParallaxProperties={undefined}
    >
      <View
        accessibilityComponentType={undefined}
        accessibilityLabel={undefined}
        accessibilityTraits={undefined}
        accessible={true}
        hitSlop={undefined}
        isTVSelectable={true}
        onLayout={undefined}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "backgroundColor": "#fff",
            "elevation": 4,
            "height": NaN,
            "opacity": 1,
            "padding": 15,
          }
        }
        testID={undefined}
        tvParallaxProperties={undefined}
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Object {
              "color": "#757575",
              "fontFamily": "System",
              "fontSize": 16,
            }
          }
          virtual={undefined}
        />
        <RCTScrollView
          dataArray={Array []}
          dataSource={
            ListViewDataSource {
              "items": 0,
            }
          }
          enableEmptySections={true}
          renderRow={[Function]}
          renderScrollComponent={[Function]}
          style={
            Object {
              "marginHorizontal": -15,
              "marginTop": 15,
            }
          }
          virtual={undefined}
        >
          <View />
        </RCTScrollView>
      </View>
    </View>
  </Modal>
</View>
`;
